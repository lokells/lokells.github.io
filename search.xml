<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/10/hello-world/"/>
      <url>/2022/03/10/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/2022/03/10/ce-shi/"/>
      <url>/2022/03/10/ce-shi/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot学习笔记</title>
      <link href="/2022/03/10/springboot-xue-xi-bi-ji-kuang/"/>
      <url>/2022/03/10/springboot-xue-xi-bi-ji-kuang/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot-kuangshen"><a href="#springboot-kuangshen" class="headerlink" title="springboot(kuangshen)"></a>springboot(kuangshen)</h1><p>核心：自动装配（重要、谈资）</p><h3 id="SpringBoot-Web开发"><a href="#SpringBoot-Web开发" class="headerlink" title="SpringBoot Web开发"></a>SpringBoot Web开发</h3><p>总结：</p><ol><li><p>在springboot中，我们可以使用以下方式处理静态资源</p><ul><li><p> webjars    <code>localhost:8080/webjars/</code></p></li><li><p>public,  static, /**, resources     <code>localhost:8080/</code></p><ol start="2"><li>优先级： resources&gt;static(默认)&gt;public</li></ol></li></ul></li></ol><h4 id="首页如何定制"><a href="#首页如何定制" class="headerlink" title="首页如何定制"></a>首页如何定制</h4><p>首页index.html不能放在resources目录下，放在resources下的public、static目录下能直接访问到，放在templates目录下要通过controller跳转才能访问</p><p>在templates目录下的所有页面，只能通过controller来跳转！</p><p>1.首页配置:</p><p>​        1.所有页面的静态资源都要thymeleaf接管；</p><p>​        2.url: @{}</p><p>2.页面国际化：</p><p>​        1.我们需要配置i18n文件</p><p>​        2.我们需要在项目组进行按钮自动切换，我们需要自定义一个组件<code>LocaleResolver</code></p><p>​        3.记得将自己写的组件配置到spring容器中<code>@Bean</code></p><p>​        4.#{}</p><p>3.登录 + 拦截器</p><p>4.增删改查</p><p>​        1.提取公共页面 </p><p>​                1.<code>th:fragment="sidebar"</code></p><p>​                2.<code>th:replace="~{commons/commons::sidebar}"</code></p><p>​                3.如果要传递参数可以直接用 () 传参，接收判断即可</p><p>​        2.列表循环展示!</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>emp:${emps}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${emp.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${emp.getLastName()}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${emp.getEmail()}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${emp.getGender()==0?<span class="token punctuation">'</span>女<span class="token punctuation">'</span>:<span class="token punctuation">'</span>男<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${emp.department.getDepartmentName()}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${#dates.format(emp.getBirth(),<span class="token punctuation">'</span>yyyy-MM-dd hh:mm<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>编辑<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-sm btn-danger<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>删除<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.添加员工</p><p>​        1.按钮提交</p><p>​        2.跳转到添加页面</p><p>​        3.添加员工成功</p><p>​        4.返回首页</p><p>6.CRUD(增删改查)搞定</p><p>7.404</p><p>前端：</p><ul><li>模板：Bootstrap后台模板（别人写好的，我们拿来改成自己需要的）</li><li>框架：组件：自己手动拼接    Bootstrap，Layui，Semantic-ui,…<ul><li>栅格系统</li><li>导航栏</li><li>侧边栏</li><li>表单</li></ul></li></ul><p>如何快速搭建web应用：</p><p>​    1.前端搞定:页面长什么样子:数据<br>​    2.设计数据库（数据库设计难点!)<br>​    3.前端让他能够自动运行，独立化工程<br>​    4.数据接口如何对接:json，对象allin one !<br>​    5.前后端联调测试!</p><p>1.有一套自己熟悉的后台模板:工作必要! x-admin<br>2.前端界面:至少自己能够通过前端框架，组合出来一个网站页面</p><p>-index </p><p>-about </p><p>-blog </p><p>-post </p><p>-user</p><p>3.让这个网站能够独立运行!</p><h3 id="当前任务"><a href="#当前任务" class="headerlink" title="当前任务"></a>当前任务</h3><ul><li><p>JDBC</p></li><li><p>Mybatis :重点</p></li><li><p>Druid :重点</p></li><li><p>Shiro :安全:重点</p></li><li><p>Spring security :安全:重点</p></li><li><p>异步任务~，邮件发送，定时任务()</p></li><li><p>Swagger</p></li><li><p>Dubbo +Zookeeper</p></li></ul><h3 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h3><p>整合包：mybatis-spring-boot-starter</p><ol><li>导入包</li><li>配置文件</li><li>mybatis配置</li><li>编写mybatis</li><li>service层调用dao层</li><li>controller层调用service层</li></ol><p>​    </p><h3 id="SpringSecurity（安全）"><a href="#SpringSecurity（安全）" class="headerlink" title="SpringSecurity（安全）"></a>SpringSecurity（安全）</h3><p>在web开发中，安全是第一位！（过滤器、拦截器）</p><p>功能性需求：否</p><p>做网站：安全应该在什么时候考虑？——设计之初</p><ul><li>漏洞、隐私泄露</li><li>架构一旦确定，就不好做安全</li></ul><p>shiro、SpringSecurity：除了类不一样，名字不一样，很像</p><p>都是做认证（authentication）和授权（authorization）</p><ul><li>功能权限</li><li>访问权限</li><li>菜单权限</li><li>过滤器和拦截器有大量的原生代码存在冗余</li></ul><p><strong>简介</strong></p><p>Spring Security是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的技术选型，他可以实现强大的Web安全控制，对于安全控制，我们仅需要引入spring-boot-starter-security模块，进行少量的配置，即可实现强大的安全管理!</p><p>记住几个类:</p><ul><li>WebSecurityConfigurerAdapter:自定义Security策略</li><li>AuthenticationManagerBuilder:自定义认证策略</li><li>@EnableWebSecurity:开启WebSecurity模式     (@Enablexxxx 开启某个功能)</li></ul><p>Spring Security的两个主要目标是“认证”和“授权”(访问控制)。</p><p>“认证”(Authentication)<br>“授权”(Authorization)</p><p>这个概念是通用的，而不是只在Spring Security中存在。</p><p>参考官网:<br><a href="https://spring.io/projects/spring-security">https://spring.io/projects/spring-security</a></p><p>查看我们自己项目中的版本，找到对应的帮助文档:<br><a href="https://docs.spring.io/spring-security/site/docs/5.2.0.RELEASE/reference/htmlsingle">https://docs.spring.io/spring-security/site/docs/5.2.0.RELEASE/reference/htmlsingle</a></p><h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p>   shiro三大对象：<br>          1.subject 用户<br>          2.securityManager 管理所有用户<br>          3.Realm 链接数据</p><h3 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h3><h4 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h4><p>​        Vue + SpringBoot</p><ul><li><p>后端：后端控制层，服务层，数据访问层 【后端团队】</p></li><li><p>前端：前端控制层，视图层 【前端团队】</p><ul><li>伪造后端数据，json（模拟后端传值，本来应该是url的，但是直接从文本获取数据了），不需要后端，前端工程依旧能够跑起来</li></ul></li><li><p>前后端如何交互？===&gt; API</p></li><li><p>前后端相对独立，松耦合；</p></li><li><p>前后端甚至可以部署在不同的服务器上</p></li></ul><p>产生问题：</p><ul><li>前后端集成联调，前端人员和后端人员无法做到“及时协商，尽早解决”，最终导致问题集中爆发；</li></ul><p>解决方法：</p><ul><li>首先制定一个schema[计划的提纲],实时更新最新的API，降低继承风险；</li><li>早些年：制定word计划文档；</li><li>前后端分离：<ul><li>前端测试后端接口：postman</li><li>后端提供接口，需要实时更新最新的消息及改动</li></ul></li></ul><h4 id="Swagger："><a href="#Swagger：" class="headerlink" title="Swagger："></a>Swagger：</h4><ul><li>号称世界上最流行的API框架；</li><li>RestFul Api文档在线自动生成工具=&gt;Api文档与Api定义同步更新</li><li>直接运行，可以在线测试API接口</li><li>支持多种语言</li></ul><p>官网：<a href="https://swagger.io/">API Documentation &amp; Design Tools for Teams | Swagger</a></p><p>在项目中使用Swagger需要Springbox；</p><ul><li>swgger2</li><li>ui</li></ul><p>SpringBoot继承Swagger</p><p>​    1.新建一个SpringBoot-web项目</p><p>​    2.导入相关依赖</p><p>​    </p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>// 现在有启动器了，可以只引下面的启动器          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.spring4all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>swagger-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    3.编写一个hello工程</p><p>​    4.配置Swagger ==&gt; Config</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@EnableSwagger2 // 开启Swagger2public class SwaggerConfig {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    5.测试运行：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><p>​    或者<a href="http://localhost:8081/swagger-ui.html#/">http://localhost:8081/swagger-ui.html#/</a></p><p>（<a href="http://localhost:8081/swagger-ui.html/%E4%B8%8D%E8%A1%8C%EF%BC%8C%E4%BC%9A%E7%9B%B4%E6%8E%A5%E6%98%BE%E7%A4%BA%E7%A9%BA%E7%99%BD%E9%A1%B5%EF%BC%89">http://localhost:8081/swagger-ui.html/不行，会直接显示空白页）</a></p><h4 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h4><p>Swagger的bean实例Docker；</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@EnableSwagger2 // 开启Swagger2public class SwaggerConfig {    // 配置Swagger的Docket的bean实例    @Bean    public Docket docket(){        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo());    }    // 配置Swagger的信息 ==&gt; apiInfo    private ApiInfo apiInfo(){        // 作者信息        Contact contact = new Contact("Lokell", "https://www.baidu.com", "1056108355@qq.com");        return new ApiInfo(                "Lokell的SwaggerAPI文档",                "星辰大海",                "v1.0",                "https://www.baidu.com",                 contact,                "Apache 2.0",                "http://www.apache.org/licenses/LICENSE-2.0",                new ArrayList()        );    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Swagger配置扫描接口"><a href="#Swagger配置扫描接口" class="headerlink" title="Swagger配置扫描接口"></a>Swagger配置扫描接口</h4><p>Docket.select()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 配置Swagger的Docket的bean实例@Beanpublic Docket docket(){    return new Docket(DocumentationType.SWAGGER_2)            .apiInfo(apiInfo())            .select()            // RequestHandlerSelectors，配置要扫描接口的方式            // basePackage:扫描指定的包            // any():扫描全部            // none():都不扫描            // withClassAnnotation():扫描类上的注解,参数是一个注解的反射对象            // withMethodAnnotation():扫描类上的注解            .apis(RequestHandlerSelectors.basePackage("com.kuang.swagger.controller"))            // paths():过滤什么路径            .paths(PathSelectors.ant("/kuang/**"))            .build();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置是否启动Swagger"><a href="#配置是否启动Swagger" class="headerlink" title="配置是否启动Swagger"></a>配置是否启动Swagger</h4><p>Docket.enable()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 配置Swagger的Docket的bean实例    @Bean    public Docket docket(){        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                // enable():是否启动Swagger，如果为false，则Swagger不能在浏览器中访问                .enable(false)                .select()       .apis(RequestHandlerSelectors.basePackage("com.kuang.swagger.controller"))                .build();    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我只希望我的Swagger在生产环境中使用，在发布的时候不使用？</p><ul><li>判断不是生产环境    flag = false</li><li>注入enable（flag）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">// 配置Swagger的Docket的bean实例@Beanpublic Docket docket(Environment environment){    // 设置要显示Swagger的环境 这是在yml配置文件中配置的环境    Profiles profiles = Profiles.of("dev","test");    // 通过environment.acceptsProfiles，判断是否处在自己设定的环境之中    boolean flag = environment.acceptsProfiles(profiles);    return new Docket(DocumentationType.SWAGGER_2)            .apiInfo(apiInfo())            // enable():是否启动Swagger，如果为false，则Swagger不能在浏览器中访问            .enable(flag)            .select()            .apis(RequestHandlerSelectors.basePackage("com.kuang.swagger.controller"))            .build();}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置API文档的分组"><a href="#配置API文档的分组" class="headerlink" title="配置API文档的分组"></a>配置API文档的分组</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">Docket.groupName("Lokell")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何配置多个分组？——多个Docket实例即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Beanpublic Docket docket1(){    return new Docket(DocumentationType.SWAGGER_2).groupName("A");}@Beanpublic Docket docket2(){    return new Docket(DocumentationType.SWAGGER_2).groupName("B");}@Beanpublic Docket docket3(){    return new Docket(DocumentationType.SWAGGER_2).groupName("C");}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实体类配置"><a href="#实体类配置" class="headerlink" title="实体类配置"></a>实体类配置</h4><p>User：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.pojo;import io.swagger.annotations.ApiModel;import io.swagger.annotations.ApiModelProperty;/** * @author xww * @date 2021/12/15 **/// @Api(注释)@ApiModel("用户实体类")public class User {    @ApiModelProperty("用户名")    public String username;    @ApiModelProperty("密码")    public String password;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>controller</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.swagger.controller;import com.kuang.pojo.User;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import org.springframework.web.bind.annotation.*;/** * @author xww * @date 2021/12/15 **/@Api(tags = "hello 控制类")@RestControllerpublic class HelloController {    // springboot除开你自定义的请求，还有默认的/error    @GetMapping(value = "/hello")    public String hello(){        return "hello";    }    // 只要我们的接口中，返回的值存在实体类，他就会被扫描到Swagger中    @PostMapping(value = "/user")    public User user(){        return new User();    }    //Operation接口,不是放在类上的，是放在方法上的    @ApiOperation("hello控制类")    @GetMapping(value = "/hello2")    public String hello2(@ApiParam("用户名") String username){        return "hello"+username;    }    @ApiOperation("Post测试类")    @PostMapping(value = "/postt")    public User postt(@ApiParam("用户名") User user){        return user;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><ol><li>我们可以用Swagger给一些比较难理解的属性或者接口，增加注释信息</li><li>接口文档实时更新</li><li>可以在线测试</li></ol><p>Swagger是一个优秀的工具，几乎所有大公司都有使用它</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>​    在正式发布的时候，关闭Swagger！出于安全考虑，而且还能节省运行内存</p><h3 id="三种任务"><a href="#三种任务" class="headerlink" title="三种任务"></a>三种任务</h3><h4 id="异步任务：Async"><a href="#异步任务：Async" class="headerlink" title="异步任务：Async"></a>异步任务：Async</h4><p>AsyncService</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.scheduling.annotation.EnableAsync;@EnableAsync // 开启异步注解功能@SpringBootApplicationpublic class Springboot09TestApplication {    public static void main(String[] args) {        SpringApplication.run(Springboot09TestApplication.class, args);    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>AsyncController：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.controller;import com.kuang.service.AsyncService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;/** * @author xww * @date 2021/12/15 **/@RestControllerpublic class AsyncController {    @Autowired    AsyncService asyncService;    @RequestMapping("/hello")    public String hello(){        asyncService.hello();   //停止三秒        return "ok!";    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h4><pre class="line-numbers language-text" data-language="text"><code class="language-text">TaskScheduler 任务调度者TaskExecutor 任务执行者@EnableScheduling // 开启定时注解@Scheduled //什么时候执行Cron表达式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h4><p>​    application.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">spring.mail.username=1056108355@qq.comspring.mail.password=rhpgwlxqpslgbddfspring.mail.host=smtp.qq.com# 开启加密验证spring.mail.properties.mail.smtp.ssl.enable=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.mail.SimpleMailMessage;import org.springframework.mail.javamail.JavaMailSender;import org.springframework.mail.javamail.JavaMailSenderImpl;@SpringBootTestclass Springboot09TestApplicationTests {    @Autowired    JavaMailSender mailSender;    @Test    void contextLoads() {        // 一个简单的邮件        SimpleMailMessage mailMessage = new SimpleMailMessage();        mailMessage.setSubject("Lokell你好鸭！");        mailMessage.setText("月溅星河，长路漫漫");        mailMessage.setTo("1056108355@qq.com");        mailMessage.setFrom("1056108355@qq.com");        mailSender.send(mailMessage);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个复杂的邮件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testvoid contextLoads2() throws MessagingException {    // 一个复杂的邮件    MimeMessage mimeMessage = mailSender.createMimeMessage();    // 组装    MimeMessageHelper helper = new MimeMessageHelper(mimeMessage,true);    // 正文    helper.setSubject("Hello Lokell");    helper.setText("&lt;p style='color:red'&gt;月溅星河，长路漫漫&lt;/p&gt;",true);    // 附件    helper.addAttachment("1.jpg",new File("C:\\Users\\Administrator\\Desktop\\1.jpg"));    helper.addAttachment("2.jpg",new File("C:\\Users\\Administrator\\Desktop\\1.jpg"));    helper.setTo("1056108355@qq.com");    helper.setFrom("1056108355@qq.com");    mailSender.send(mimeMessage);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>封装复杂邮件发送方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">/** * 封装复杂邮件发送方法 * @param html 是否开启html标签 * @param subject 邮件主题 * @param text  邮件文本内容 * @param fileName  文件名 * @param url   文件路径 * @param toWhere   发送给谁 * @param fromWhere 发送者是谁 * @throws MessagingException 消息异常 */public void sendMail(Boolean html,String subject,String text,String fileName,String url,String toWhere,String fromWhere) throws MessagingException {    // 一个复杂的邮件    MimeMessage mimeMessage = mailSender.createMimeMessage();    // 组装    MimeMessageHelper helper = new MimeMessageHelper(mimeMessage,html);    // 正文    helper.setSubject(subject);    helper.setText(text,html);    // 附件    helper.addAttachment(fileName,new File(url));    helper.addAttachment(fileName,new File(url));    helper.setTo(toWhere);    helper.setFrom(fromWhere);    mailSender.send(mimeMessage);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分布式Dubbo-zookeeper-SpringBoot"><a href="#分布式Dubbo-zookeeper-SpringBoot" class="headerlink" title="分布式Dubbo + zookeeper+SpringBoot"></a>分布式Dubbo + zookeeper+SpringBoot</h3><p>RPC：Remote Procedure Call （远程过程调用）</p><p>rpc不能穿防火墙，但是http可以</p><p>RPC的两个核心模块：通讯和序列化</p><ul><li>序列化：数据传输需要转换</li></ul><h4 id="Dubbo："><a href="#Dubbo：" class="headerlink" title="Dubbo："></a>Dubbo：</h4><p> Apache Dubbo是一款高性能、轻量级的开源java RPC框架，它提供了三大核心能力：</p><ul><li>面向接口的远程方法调用</li><li>智能容错和负载均衡</li><li>服务器自动注册和发现</li></ul><ul><li>服务提供者(Provider):暴露服务的服务提供方，服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者(Consumer）:调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>注册中心(Registry):注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者</li><li>监控中心(Monitor)）:服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心</li></ul><h5 id="调用关系说明："><a href="#调用关系说明：" class="headerlink" title="调用关系说明："></a>调用关系说明：</h5><ul><li>服务容器负责启动，加载，运行服务提供者。</li><li>服务提供者在启动时，向注册中心注册自己提供的服务。</li><li>服务消费者在启动时，向注册中心订阅自己所需的服务。</li><li>注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。</li><li>服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。</li><li>服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。</li></ul><p>zookeeper：注册中心</p><p>Zookeeper默认端口号：2181</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">clientPort=2181<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Dubbo：jar包</p><p>doubbo-admin：是一个监控管理后台，可以查看我们注册了那些服务，那些服务被消费了</p><p>doubbo-admin开启之后的访问地址：<a href="http://localhost:7001/">http://localhost:7001</a></p><p>​    默认的用户名和密码都是：root</p><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤:"></a>步骤:</h4><p>前提：zookeeper服务已开启！</p><h5 id="1-提供者提供服务"><a href="#1-提供者提供服务" class="headerlink" title="1.提供者提供服务"></a>1.提供者提供服务</h5><p>​        1.导入依赖</p><p>需要的依赖：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 导入依赖：Dubbo + Zookeeper(zkclient) --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.dubbo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>dubbo-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.sgroschupf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zkclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 日志会冲突！ --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.4.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 排除slf4j-log4j12 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-framework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.curator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>curator-recipes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p><p>​        2.配置注册中心的地址，以及服务发现名和要扫描的包；</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">server.port=8001# 服务应用名字dubbo.application.name=provider-server# 注册中心地址dubbo.registry.address=zookeeper://127.0.0.1:2181# 哪些服务要被注册dubbo.scan.base-packages=com.kuang.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        3.在想要被注册的服务上面增加一个注解：@Service（是Dubbo下的）</p><h5 id="2-消费者如何消费"><a href="#2-消费者如何消费" class="headerlink" title="2.消费者如何消费"></a>2.消费者如何消费</h5><p>​        1.导入依赖</p><p>​        2.配置注册中心的地址，配置自己的服务名</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">server.port=8002# 消费者去哪里拿服务——&gt;注册中心  需要暴露自己的名字dubbo.application.name=consumer-server# 注册中心地址(可以在任何电脑上！)dubbo.registry.address=zookeeper://127.0.0.1:2181<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        3.从远程注入服务： @Reference （新版的是@DubboReference），一般引用pom坐标，如果没有坐标可以定义路径相同的接口名（路径一定要相同，要不然拿不到）</p><p>​        TicketService接口，在提供者和消费者中module路径是相同的</p><h3 id="SpringBoot集成Redis"><a href="#SpringBoot集成Redis" class="headerlink" title="SpringBoot集成Redis"></a>SpringBoot集成Redis</h3><p>SpringBoot操作数据：spring-data jpa jdbc MongoDB redis等</p><p>SpringData 是和SpringBoot齐名的项目！</p><p>说明：在SpringBoot2.x之后，原来使用的jedis被替换成了lettuce</p><p>jedis：底层采用直连，多个线程操作的话是不安全的。如果想要避免不安全，就要使用jedis-pool连接池（更想BIO模式）</p><p>lettuce：底层采用netty，实例可以在多个线程中进行共享，不存在线程不安全的情况。可以减少线程数据的使用（更像NIO模式）</p><p>源码分析：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Bean@ConditionalOnMissingBean(name = "redisTemplate") // 我们自己可以定义一个redisTemplate来替换默认的@ConditionalOnSingleCandidate(RedisConnectionFactory.class)public RedisTemplate&lt;Object, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) {   // 默认的RedisTemplate，没有过多设置，redis对象都是需要序列化的！   // 两个泛型都是 object，object的类型我们后面使用需要强制转换&lt;String, Object&gt;   RedisTemplate&lt;Object, Object&gt; template = new RedisTemplate&lt;&gt;();   template.setConnectionFactory(redisConnectionFactory);   return template;}@Bean@ConditionalOnMissingBean // 由于String是redis中最常使用的类型，所以说单独提出来了一个Bean@ConditionalOnSingleCandidate(RedisConnectionFactory.class)public StringRedisTemplate stringRedisTemplate(RedisConnectionFactory redisConnectionFactory) {   return new StringRedisTemplate(redisConnectionFactory);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整合测试：</p><p>1.导入依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 操作Redis --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.配置连接</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"># 配置Redisspring.redis.host=127.0.0.1spring.redis.port=6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.connection.RedisConnection;import org.springframework.data.redis.core.RedisTemplate;@SpringBootTestclass Redis02SpringbootApplicationTests {    @Autowired    private RedisTemplate redisTemplate;    @Test    void contextLoads() {        // redisTemplate  操作不同的数据类型，api和我们的指令是一样的        // opsForValue() 操作字符串，类似String        // opsForList()  操作List，类似List        // opsForSet()   操作Set，类似于Set        // opsForZSet()        // opsForHyperLogLog()        // opsForHash()        // opsForGeo     操作地图        // 出了基本的操作，我们常用的方法都可以通过redisTemplate操作，比如事务和基本的CRUD        // 获取redis的连接对象        RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();        connection.flushDb();        connection.flushAll();        redisTemplate.opsForValue().set("mykey","kuangshen");        System.out.println(redisTemplate.opsForValue().get("mykey"));    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="我们来编写一个自己的RedisTemplate"><a href="#我们来编写一个自己的RedisTemplate" class="headerlink" title="我们来编写一个自己的RedisTemplate"></a>我们来编写一个自己的RedisTemplate</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">package com.kuang.config;import com.fasterxml.jackson.annotation.JsonAutoDetect;import com.fasterxml.jackson.annotation.PropertyAccessor;import com.fasterxml.jackson.databind.ObjectMapper;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.data.redis.connection.RedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;import org.springframework.data.redis.serializer.StringRedisSerializer;/** * @author xww * @date 2021/12/16 **/@Configurationpublic class RedisConfig {    // 这是狂神写好的一个固定模板，大家在企业中哪去就可以直接使用    // 编写我们自己的redisTemplate    @Bean    @SuppressWarnings("all")    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory factory) {        // 我们为了自己开发方便，一般直接用&lt;String,Object&gt;        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();        template.setConnectionFactory(factory);        // Json序列化配置        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);        ObjectMapper om = new ObjectMapper();        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);        jackson2JsonRedisSerializer.setObjectMapper(om);        // String的序列化        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();        // 配置具体的序列化方式        // key采用String的序列化方式        template.setKeySerializer(stringRedisSerializer);        // hash的key也采用String的序列化方式        template.setHashKeySerializer(stringRedisSerializer);        // value序列化方式采用Jackson        template.setValueSerializer(jackson2JsonRedisSerializer);        // hash的value序列化方式采用Jackson        template.setHashKeySerializer(jackson2JsonRedisSerializer);        template.afterPropertiesSet();        return template;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="RedisUtil-java"><a href="#RedisUtil-java" class="headerlink" title="RedisUtil.java"></a>RedisUtil.java</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Component;import org.springframework.util.CollectionUtils;import java.util.List;import java.util.Map;import java.util.Set;import java.util.concurrent.TimeUnit;@Componentpublic final class RedisUtil {    @Autowired    private RedisTemplate&lt;String, Object&gt; redisTemplate;    // =============================common============================    /**     * 指定缓存失效时间     * @param key  键     * @param time 时间(秒)     */    public boolean expire(String key, long time) {        try {            if (time &gt; 0) {                redisTemplate.expire(key, time, TimeUnit.SECONDS);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 根据key 获取过期时间     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */    public long getExpire(String key) {        return redisTemplate.getExpire(key, TimeUnit.SECONDS);    }    /**     * 判断key是否存在     * @param key 键     * @return true 存在 false不存在     */    public boolean hasKey(String key) {        try {            return redisTemplate.hasKey(key);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 删除缓存     * @param key 可以传一个值 或多个     */    @SuppressWarnings("unchecked")    public void del(String... key) {        if (key != null &amp;&amp; key.length &gt; 0) {            if (key.length == 1) {                redisTemplate.delete(key[0]);            } else {                redisTemplate.delete(CollectionUtils.arrayToList(key));            }        }    }    // ============================String=============================    /**     * 普通缓存获取     * @param key 键     * @return 值     */    public Object get(String key) {        return key == null ? null : redisTemplate.opsForValue().get(key);    }    /**     * 普通缓存放入     * @param key   键     * @param value 值     * @return true成功 false失败     */    public boolean set(String key, Object value) {        try {            redisTemplate.opsForValue().set(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 普通缓存放入并设置时间     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */    public boolean set(String key, Object value, long time) {        try {            if (time &gt; 0) {                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);            } else {                set(key, value);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 递增     * @param key   键     * @param delta 要增加几(大于0)     */    public long incr(String key, long delta) {        if (delta &lt; 0) {            throw new RuntimeException("递增因子必须大于0");        }        return redisTemplate.opsForValue().increment(key, delta);    }    /**     * 递减     * @param key   键     * @param delta 要减少几(小于0)     */    public long decr(String key, long delta) {        if (delta &lt; 0) {            throw new RuntimeException("递减因子必须大于0");        }        return redisTemplate.opsForValue().increment(key, -delta);    }    // ================================Map=================================    /**     * HashGet     * @param key  键 不能为null     * @param item 项 不能为null     */    public Object hget(String key, String item) {        return redisTemplate.opsForHash().get(key, item);    }    /**     * 获取hashKey对应的所有键值     * @param key 键     * @return 对应的多个键值     */    public Map&lt;Object, Object&gt; hmget(String key) {        return redisTemplate.opsForHash().entries(key);    }    /**     * HashSet     * @param key 键     * @param map 对应多个键值     */    public boolean hmset(String key, Map&lt;String, Object&gt; map) {        try {            redisTemplate.opsForHash().putAll(key, map);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * HashSet 并设置时间     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */    public boolean hmset(String key, Map&lt;String, Object&gt; map, long time) {        try {            redisTemplate.opsForHash().putAll(key, map);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */    public boolean hset(String key, String item, Object value) {        try {            redisTemplate.opsForHash().put(key, item, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */    public boolean hset(String key, String item, Object value, long time) {        try {            redisTemplate.opsForHash().put(key, item, value);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */    public void hdel(String key, Object... item) {        redisTemplate.opsForHash().delete(key, item);    }    /**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */    public boolean hHasKey(String key, String item) {        return redisTemplate.opsForHash().hasKey(key, item);    }    /**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     */    public double hincr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, by);    }    /**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     */    public double hdecr(String key, String item, double by) {        return redisTemplate.opsForHash().increment(key, item, -by);    }    // ============================set=============================    /**     * 根据key获取Set中的所有值     * @param key 键     */    public Set&lt;Object&gt; sGet(String key) {        try {            return redisTemplate.opsForSet().members(key);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */    public boolean sHasKey(String key, Object value) {        try {            return redisTemplate.opsForSet().isMember(key, value);        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */    public long sSet(String key, Object... values) {        try {            return redisTemplate.opsForSet().add(key, values);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */    public long sSetAndTime(String key, long time, Object... values) {        try {            Long count = redisTemplate.opsForSet().add(key, values);            if (time &gt; 0) {                expire(key, time);            }            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 获取set缓存的长度     *     * @param key 键     */    public long sGetSetSize(String key) {        try {            return redisTemplate.opsForSet().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */    public long setRemove(String key, Object... values) {        try {            Long count = redisTemplate.opsForSet().remove(key, values);            return count;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    // ===============================list=================================    /**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     */    public List&lt;Object&gt; lGet(String key, long start, long end) {        try {            return redisTemplate.opsForList().range(key, start, end);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 获取list缓存的长度     *     * @param key 键     */    public long lGetListSize(String key) {        try {            return redisTemplate.opsForList().size(key);        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }    /**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     */    public Object lGetIndex(String key, long index) {        try {            return redisTemplate.opsForList().index(key, index);        } catch (Exception e) {            e.printStackTrace();            return null;        }    }    /**     * 将list放入缓存     *     * @param key   键     * @param value 值     */    public boolean lSet(String key, Object value) {        try {            redisTemplate.opsForList().rightPush(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     * @param key   键     * @param value 值     * @param time  时间(秒)     */    public boolean lSet(String key, Object value, long time) {        try {            redisTemplate.opsForList().rightPush(key, value);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */    public boolean lSet(String key, List&lt;Object&gt; value) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */    public boolean lSet(String key, List&lt;Object&gt; value, long time) {        try {            redisTemplate.opsForList().rightPushAll(key, value);            if (time &gt; 0) {                expire(key, time);            }            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */    public boolean lUpdateIndex(String key, long index, Object value) {        try {            redisTemplate.opsForList().set(key, index, value);            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        }    }    /**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */    public long lRemove(String key, long count, Object value) {        try {            Long remove = redisTemplate.opsForList().remove(key, count, value);            return remove;        } catch (Exception e) {            e.printStackTrace();            return 0;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所有的redis操作，其实对于java开发人员来说，十分的简单，重要的是要去理解redis的思想和每一种数据结构的用处和场景！</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
